"use strict";(self.webpackChunkvolca_docs=self.webpackChunkvolca_docs||[]).push([[92],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,g=u["".concat(s,".").concat(f)]||u[f]||d[f]||l;return n?o.createElement(g,a(a({ref:t},p),{},{components:n})):o.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const l={slug:"/configure-storage"},a="8. Configure Storage",i={unversionedId:"project-setup/configure-storage",id:"project-setup/configure-storage",title:"8. Configure Storage",description:"A common use case when setting up your project is storing files. Volca includes functionality for storing files in a secure manner with AWS S3 and AWS Cognito.",source:"@site/docs/project-setup/08-configure-storage.md",sourceDirName:"project-setup",slug:"/configure-storage",permalink:"/configure-storage",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{slug:"/configure-storage"},sidebar:"tutorialSidebar",previous:{title:"7. Configure Sentry",permalink:"/configure-sentry"},next:{title:"Configuration",permalink:"/configuration"}},s={},c=[{value:"Enable for local development",id:"enable-for-local-development",level:3},{value:"Storage levels",id:"storage-levels",level:2},{value:"Uploading files",id:"uploading-files",level:2},{value:"Note on protected and private files",id:"note-on-protected-and-private-files",level:3},{value:"Fetching files",id:"fetching-files",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"8-configure-storage"},"8. Configure Storage"),(0,r.kt)("p",null,"A common use case when setting up your project is storing files. Volca includes functionality for storing files in a secure manner with AWS S3 and AWS Cognito."),(0,r.kt)("h3",{id:"enable-for-local-development"},"Enable for local development"),(0,r.kt)("p",null,"To enable storage when developing locally you first need to deploy some assets to AWS. We recommend deploying a staging environment and then using it for your local development."),(0,r.kt)("p",null,"Once the stack is deployed, you can find the name of the bucket in the outputs of the api stack in your terminal. You can then add that value as an environment variable in your local config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"local: {\n  ...\n  environmentVariables: {\n    ...\n    AWS_S3_ASSETS_BUCKET: '<your-s3-bucket-name>',\n  },\n}\n")),(0,r.kt)("h2",{id:"storage-levels"},"Storage levels"),(0,r.kt)("p",null,"Volca comes bundled with three different storage level and replicates the behaviour by AWS Amplify. The following storage levels are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Public"),": Files accessible by anyone"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Protected"),": Files accessible by authenticated users"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Private"),": Files accessible by the user that uploaded them")),(0,r.kt)("h2",{id:"uploading-files"},"Uploading files"),(0,r.kt)("p",null,"Files can be uploaded by using the component ",(0,r.kt)("inlineCode",{parentName:"p"},"FileInput.tsx"),". It can be hooked up to ",(0,r.kt)("inlineCode",{parentName:"p"},"react-hook-form")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'<FormControl isInvalid={!!errors.key}>\n  <FormLabel>File</FormLabel>\n  <Controller\n    control={control}\n    name="key"\n    render={({ field: { onChange } }) => (\n      <FileInput\n        description="Your file will be uploaded to the cloud"\n        level="public"\n        onUpload={({ key }) => {\n          onChange(key);\n          handleSubmit(_onSubmit)();\n        }}\n      />\n    )}\n  />\n  <FormErrorMessage>{errors.key?.message}</FormErrorMessage>\n</FormControl>\n')),(0,r.kt)("p",null,"When a file is selected it will be automatically uploaded to aws s3 with the correct storage level and the key will be returned in the ",(0,r.kt)("inlineCode",{parentName:"p"},"onUpload")," callback. The key can then be stored in your database and later be fetched."),(0,r.kt)("h3",{id:"note-on-protected-and-private-files"},"Note on protected and private files"),(0,r.kt)("p",null,"When uploading with the storage level ",(0,r.kt)("inlineCode",{parentName:"p"},"protected")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"private")," you will also need to keep track of the users identityId, since it will be needed when fetching the file. This is due to how the storage and IAM policies works in AWS."),(0,r.kt)("p",null,"Here is an example on how you can upload a file by fetching the current user and project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { selectedProject: project } = useProjectsContext();\nconst { user } = useAuthContext();\n\nconst createNewAsset = ({ key, level }: { key: string }) => {\n  executeApiAction({\n    action: async ({ client }) => {\n      await client\n        .post(`projects/${project?.id}/assets`, {\n          json: { key, level, cognitoIdentityId: user.cognitoIdentityId },\n        })\n        .json();\n    },\n  });\n};\n")),(0,r.kt)("h2",{id:"fetching-files"},"Fetching files"),(0,r.kt)("p",null,"To fetch files, we can use the AWS Amplify SDK storage module. Plug in the key you received on upload, the storage level and the identity id if fetching files from the ",(0,r.kt)("inlineCode",{parentName:"p"},"protected")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"private")," levels. For more information on how to fetch files, check the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/lib/storage/download/q/platform/js/"},"AWS Amplify documentation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const res = await Storage.get(key, {\n  level: "protected",\n  identityId: "identityId",\n});\n')))}u.isMDXComponent=!0}}]);