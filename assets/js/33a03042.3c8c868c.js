"use strict";(self.webpackChunkvolca_docs=self.webpackChunkvolca_docs||[]).push([[895],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(g,s(s({ref:t},p),{},{components:n})):o.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:a,s[1]=r;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2,slug:"/todo"},s="Building a todo app",r={unversionedId:"examples/todo-app",id:"examples/todo-app",title:"Building a todo app",description:"In this guide we will walk you through the process of creating a todo list in Volca.",source:"@site/docs/examples/todo-app.md",sourceDirName:"examples",slug:"/todo",permalink:"/docs/todo",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/todo"},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/category/examples"}},l={},c=[{value:"Create a database migration",id:"create-a-database-migration",level:2},{value:"Create an entity",id:"create-an-entity",level:2},{value:"Create a service",id:"create-a-service",level:2},{value:"Create an API action",id:"create-an-api-action",level:2},{value:"Create an API endpoint",id:"create-an-api-endpoint",level:2},{value:"Create a type for a todo",id:"create-a-type-for-a-todo",level:2},{value:"Create a function to call the API",id:"create-a-function-to-call-the-api",level:2},{value:"Create a hook that fetches todos",id:"create-a-hook-that-fetches-todos",level:2},{value:"Create a page that displays a table of todos",id:"create-a-page-that-displays-a-table-of-todos",level:2},{value:"Create a route for the page",id:"create-a-route-for-the-page",level:2},{value:"Create a menu item",id:"create-a-menu-item",level:2},{value:"Finished!",id:"finished",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"building-a-todo-app"},"Building a todo app"),(0,a.kt)("p",null,"In this guide we will walk you through the process of creating a todo list in Volca."),(0,a.kt)("p",null,"Before you start, make sure you have gone through the ",(0,a.kt)("a",{parentName:"p",href:"/docs/category/getting-started"},"getting started guide"),"."),(0,a.kt)("h2",{id:"create-a-database-migration"},"Create a database migration"),(0,a.kt)("p",null,"All database migrations are defined in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/lib/db/migrations.ts"),"."),(0,a.kt)("p",null,"Add your migration to the file like this to create the todos table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/lib/db/migrations.ts"',title:'"services/api/src/lib/db/migrations.ts"'},"...\n{\n    name: '09_create_todos_table',\n    up: (knex: Knex) => {\n        return knex.schema.createTable('todos', (table) => {\n        table.uuid('id').defaultTo(knex.raw('uuid_generate_v4()')).primary();\n        table.uuid('project_id').notNullable().index().references('id').inTable('projects');\n        table.string('title').notNullable();\n        });\n    },\n    down: (knex: Knex) => {\n        return knex.schema.dropTable('todos');\n    },\n...\n")),(0,a.kt)("p",null,"Run the command ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn migrate:latest:local")," from the ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api")," folder to apply the migration and create the table."),(0,a.kt)("h2",{id:"create-an-entity"},"Create an entity"),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/entities/todo.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/entities/todo.ts"',title:'"services/api/src/entities/todo.ts"'},"import { Model } from 'objection';\n\nexport class Todo extends Model {\n  id!: string;\n  title!: string;\n\n  static get tableName() {\n    return 'todos';\n  }\n}\n\n")),(0,a.kt)("p",null,"And export it from the ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/entities/index.ts")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/entities/index.ts"',title:'"services/api/src/entities/index.ts"'},"export * from './todo';\n")),(0,a.kt)("h2",{id:"create-a-service"},"Create a service"),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/services/todo-service.ts"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/services/todo-service.ts"',title:'"services/api/src/services/todo-service.ts"'},"import { injectable } from 'tsyringe';\nimport { Todo } from '../entities';\n\n@injectable()\nexport class TodoService {\n  public async list(projectId: string): Promise<Todo[]> {\n    return Todo.query().where({ projectId });\n  }\n}\n\n")),(0,a.kt)("p",null,"And export it from the ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/services/index.ts")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/services/index.ts"',title:'"services/api/src/services/index.ts"'},"export * from './todo-service';\n")),(0,a.kt)("h2",{id:"create-an-api-action"},"Create an API action"),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/actions/todos/list-todos.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/actions/todos/list-todos.ts"',title:'"services/api/src/actions/todos/list-todos.ts"'},"import { container } from 'tsyringe';\nimport { useApiAction } from '../utils/api-action';\nimport { TodoService } from '../../services';\nimport { CustomContext } from 'src/types';\n\nexport const listTodosAction = useApiAction(async (ctx: CustomContext) => {\n  const todoService = container.resolve(TodoService);\n\n  const { projectId } = ctx.params;\n\n  const todos = await todoService.list(projectId);\n\n  return {\n    body: { todos },\n  };\n});\n")),(0,a.kt)("p",null,"And export it from a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/actions/todos/index.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/actions/todos/index.ts"',title:'"services/api/src/actions/todos/index.ts"'},"export * from './list-todos';\n")),(0,a.kt)("h2",{id:"create-an-api-endpoint"},"Create an API endpoint"),(0,a.kt)("p",null,"Import the ",(0,a.kt)("inlineCode",{parentName:"p"},"listTodosAction")," at the top of the file ",(0,a.kt)("inlineCode",{parentName:"p"},"services/api/src/router.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/router.ts"',title:'"services/api/src/router.ts"'},"import { listTodosAction } from './actions/todos';\n\n")),(0,a.kt)("p",null,"And add a new route that lists the todos:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/api/src/router.ts"',title:'"services/api/src/router.ts"'},"router.get('/projects/:projectId/todos', authenticationMiddleware, projectUserMiddleware, listTodosAction);\n\n")),(0,a.kt)("p",null,"In this case we want to add two middlewares:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"authenticationMiddleware")," that makes sure the user is logged in before returning the todos\n",(0,a.kt)("inlineCode",{parentName:"p"},"projectUserMiddleware")," that makes sure that the user has access to the project that holds the todos"),(0,a.kt)("p",null,"Now we are done with the backend API. Let's move on to the frontend webapp."),(0,a.kt)("h2",{id:"create-a-type-for-a-todo"},"Create a type for a todo"),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/types/todo.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/types/todo.ts"',title:'"clients/web/src/types/todo.ts"'},"export type Todo = {\n  id: string;\n  title: string;\n};\n\n")),(0,a.kt)("p",null,"And export it from ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/types/index.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/types/index.ts"',title:'"clients/web/src/types/index.ts"'},"export * from './todo';\n")),(0,a.kt)("h2",{id:"create-a-function-to-call-the-api"},"Create a function to call the API"),(0,a.kt)("p",null,"Import the ",(0,a.kt)("inlineCode",{parentName:"p"},"Todo")," type at the top of ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/lib/clients/api-client.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/lib/clients/api-client.ts"',title:'"clients/web/src/lib/clients/api-client.ts"'},"import { ..., Todo, ... } from '../../types';\n")),(0,a.kt)("p",null,"Add a type for the response body in the same file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/lib/clients/api-client.ts"',title:'"clients/web/src/lib/clients/api-client.ts"'},"type GetTodosResponse = {\n  todos: Todo[];\n};\n")),(0,a.kt)("p",null,"And add a function to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ApiClient")," class in the same file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/lib/clients/api-client.ts"',title:'"clients/web/src/lib/clients/api-client.ts"'},"static async getTodos(projectId: string): Promise<User[]> {\n    const { todos } = await this.handleApiError(\n      this.tokenClient.get(`projects/${id}/todos`).json<GetTodosResponse>()\n    );\n    return users;\n  }\n")),(0,a.kt)("h2",{id:"create-a-hook-that-fetches-todos"},"Create a hook that fetches todos"),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/hooks/todo-actions.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/hooks/todo-actions.ts"',title:'"clients/web/src/hooks/todo-actions.ts"'},"import { useCallback } from 'react';\n\nimport { ApiClient } from '../lib/clients/api-client';\nimport { Todo } from '../types';\nimport { useApiActions } from './api-actions';\n\nexport const useTodoActions = () => {\n  const { executeApiAction } = useApiActions();\n\n  const getTodos = async (projectId: string) =>\n    await executeApiAction<Todo[]>({\n      action: () => ApiClient.getTodos(projectId),\n      errorMessage: 'Failed to load todos',\n    });\n\n  return {\n    getTodos: useCallback(getTodos, [executeApiAction]),\n  };\n};\n")),(0,a.kt)("p",null,"And export it from ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/hooks/index.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/hooks/index.ts"',title:'"clients/web/src/hooks/index.ts"'},"export * from './todo-actions';\n")),(0,a.kt)("h2",{id:"create-a-page-that-displays-a-table-of-todos"},"Create a page that displays a table of todos"),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/pages/todos.tsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/pages/todos.tsx"',title:'"clients/web/src/pages/todos.tsx"'},"import { Heading, Box, SimpleGrid } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { MdWork } from 'react-icons/md';\n\nimport { AuthenticatedLayout } from '../layouts';\nimport { PageHeading } from '../components/generic/PageHeading';\nimport { SoftCard } from '../components/generic/SoftCard';\nimport { selectedProjectState } from '../state';\nimport { useRecoilValue } from 'recoil';\nimport { useTodoActions } from '../hooks';\nimport { Todo } from '../types';\n\nexport const TodosPage: React.FC = () => {\n  const project = useRecoilValue(selectedProjectState);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const { getTodos } = useTodoActions();\n  useEffect(() => {\n    const loadTodos = async () => {\n      console.log('loading');\n      console.log(project?.name);\n      if (project) {\n        const data = await getTodos(project.id);\n        setTodos(data || []);\n      }\n    };\n    loadTodos();\n  }, [project, getTodos]);\n\n  return (\n    <AuthenticatedLayout sidebar={false}>\n      <PageHeading title=\"Todos\" icon={MdWork} />\n      <Box mt={8} />\n      <SimpleGrid minChildWidth=\"200px\" width=\"100%\" spacingX=\"40px\" spacingY=\"20px\">\n        {todos.map((todo) => (\n          <SoftCard key={todo.id}>\n            <Heading as=\"h3\" size=\"sm\" textAlign=\"center\">\n              {todo.title}\n            </Heading>\n          </SoftCard>\n        ))}\n      </SimpleGrid>\n    </AuthenticatedLayout>\n  );\n};\n\n")),(0,a.kt)("p",null,"And export it from ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/pages/index.tsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/pages/index.tsx"',title:'"clients/web/src/pages/index.tsx"'},"export * from './todos';\n")),(0,a.kt)("h2",{id:"create-a-route-for-the-page"},"Create a route for the page"),(0,a.kt)("p",null,"Import the page in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/App.tsx"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/App.tsx"',title:'"clients/web/src/App.tsx"'},"import {\n  TodosPage,\n} from './pages';\n")),(0,a.kt)("p",null,"Add a new route that displays the page in the same file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/App.tsx"',title:'"clients/web/src/App.tsx"'},'<Route\n  path="/projects/:id/todos"\n  element={\n    <AuthenticatedRoute>\n      <TodosPage />\n    </AuthenticatedRoute>\n  }\n></Route>\n')),(0,a.kt)("p",null,"Since this page should only be available to authenticated users, we wrap it in ",(0,a.kt)("inlineCode",{parentName:"p"},"<AuthenticatedRoute>"),"."),(0,a.kt)("h2",{id:"create-a-menu-item"},"Create a menu item"),(0,a.kt)("p",null,"Add a meu item to the ",(0,a.kt)("inlineCode",{parentName:"p"},"LinkItems")," array in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"clients/web/src/components/layout/sidebar.tsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="clients/web/src/components/layout/sidebar.tsx"',title:'"clients/web/src/components/layout/sidebar.tsx"'},"{\n    name: 'Todos',\n    onClick: () => navigate(selectedProject ? `/projects/${selectedProject.id}/todos` : '/'),\n    icon: MdGroups,\n},\n")),(0,a.kt)("h2",{id:"finished"},"Finished!"),(0,a.kt)("p",null,"Now you should be able to navigate to your page and see any todos stored in the database. Since we have not developed a UI to create todos, you can add them to the database manually for now to see that everything is working properly"))}d.isMDXComponent=!0}}]);